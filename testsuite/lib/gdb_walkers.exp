# Tool config file -- Store helper procedures in one place.
# We put them here instead of testsuite/config/unix.exp to match the suggested
# layout.
# Because the test makes the 
spawn gdb
# TODO Check no error warnings about my python extensions.
expect {
    "(gdb)" {}
    default {
        unresolved "Failed to spawn program"
    }
}

# Need this for more modern versions of GDB.
# These now come with styling, and that means that `printf` now emits control
# characters to clear styling whenever printing anything.
# This messes up my testsuite, so I turn it off here.
send "set style enabled off\n"
send "add-inferior -exec demos/tree\n"
send "add-inferior -exec demos/tree_debug\n"
send "add-inferior -exec demos/list\n"
send "add-inferior -exec demos/cpp_structures\n"
send "add-auto-load-scripts-directory /usr/share/gdb/auto-load\n"
send "add-auto-load-safe-path /usr/share/gdb/auto-load\n"
send "set pagination off\n"
# set timeout 5
# TODO For now assume we can never have a different inferior number (I don't
# see how we can), but later on I should parse the output of the command and
# read the inferior number just to be safe.
set plain_inferior 2
set debug_inferior 3
set list_inferior 4
set cpp_inferior 5
# expect {
#     "

proc run_basic_test { test_name commands expect_string } {
    global verbose
    global expect_out

    if { $verbose > 1 } {
        send_user "Starting\n$commands\n"
        send_log "Matching\n$expect_string\n"
    }

    send $commands
    expect {
        -re $expect_string {
            pass "$test_name\n"
        }
        eof {
            fail "$test_name: EOF\n"
        }
        timeout {
	    expect {
	       "*" {
		 unresolved "$test_name: timeout\n\n\nSTARTOFOUTPUT\n\n\n\n $expect_out(buffer)\n\n\nENDOFOUTPUT\n"
	       }
	      -timeout 1 {
		unresolved "$test_name: timeout without any output\n"
	      }
	    }
        }
    }
}

proc wait_for_exit { exit_name } {
    send "cont\n"
    expect {
        "exited" {}
        default {
            unresolved "After test $exit_name couldn't finish!!"
        }
    }
}

proc ensure_finished { name } {
    # NOTE -- require all breakpoints to have either been disabled or deleted.
    # (or not in the code path to completion).
    send "cont\n"
    expect {
        "The program is not being run." {}
        "exited" {}
        default {
            unresolved "Couldn't ensure_finished at $name"
        }
    }
}

proc check_without_reset { name command_name out_name} {
    upvar 1 $command_name commands $out_name out
    run_basic_test $name  "[join $commands \n]\n" [join $out "\r\n"]
}

proc check_so_far { name command_name out_name} {
    upvar 1 $command_name commands $out_name out
    run_basic_test $name  "[join $commands \n]\n" [join $out "\r\n"]
    set commands ""
    set out ""
}

