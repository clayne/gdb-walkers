# Use separate procedure to ensure no variable clashing
# This does mean we have to access the correct scope with `upvar`
# proc test_shellpipe {} {
set known_calls ""
lappend known_calls "   0x\[0-9a-z\]+ <\\+\[0-9\]+>:	callq  0x\[0-9a-z\]+ <fprintf@plt>"
lappend known_calls "   0x\[0-9a-z\]+ <\\+\[0-9\]+>:	callq  0x\[0-9a-z\]+ <exit@plt>"
lappend known_calls "   0x\[0-9a-z\]+ <\\+\[0-9\]+>:	callq  0x\[0-9a-z\]+ <atoi@plt>"
lappend known_calls "   0x\[0-9a-z\]+ <\\+\[0-9\]+>:	callq  0x\[0-9a-z\]+ <create_random_tree>"
lappend known_calls "   0x\[0-9a-z\]+ <\\+\[0-9\]+>:	callq  0x\[0-9a-z\]+ <free_tree>"
# # For some reason I don't know, each line is appended with a \r character, so
# # we only add a \n character to each to match the output we're seeing.
set known_calls [join $known_calls "\r\n"]

run_basic_test "shellpipe debug disassemble" "inferior $debug_inferior\nshellpipe disassemble main ! grep call\n" $known_calls
run_basic_test "shellpipe plain disassemble" "inferior $plain_inferior\nshellpipe disassemble main ! grep call\n" $known_calls

unset known_calls
